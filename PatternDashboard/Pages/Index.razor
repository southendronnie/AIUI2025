@page "/"
@using AIUI2025.Services
@using System.Text.Json
@inject MarketDataService MarketData
@inject HttpClient Http




<div class="dashboard-row">
    <section class="panel ">
        <PatternDashboard.Components.MarketChart />
    </section>

<button class="btn btn-outline-primary" @onclick="ShowBacktestModal">
    Run Backtest
</button>
</div>
<div class="dashboard-row">
    <section class="panel narrow">
        <PatternDashboard.Components.PatternDashboard />
    </section>
    <section class="panel narrow">
        <PatternDashboard.Components.TickStream />
    </section>
</div>
<div class="dashboard-row">
<h2>Strategy Dashboard</h2>


    <section class="panel narrow">

        <PatternDashboard.Components.SignalOverlay candles="@candles" config="@request.Config" />

    </section>
    <section class="panel narrow">
            <PatternDashboard.Components.PatternOverlay />
    </section>
</div>


@if (showBacktest)
{
     request.Start = Stat.WindowStart;
     request.End = Stat.WindowEnd;
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-modal="true" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Backtest Strategy</h5>
                    <button type="button" class="btn-close" @onclick="HideBacktestModal"></button>
                </div>
                <div class="modal-body">
                    <div class="modal-body">
                        <EditForm Model="@request" OnValidSubmit="RunBacktest">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label>Start Date</label>
                                <InputDate @bind-Value="request.Start" class="form-control"  />
                                @request.Start.ToShortTimeString()
                            </div>

                            <div class="mb-3">
                                <label>End Date</label>
                                <InputDate @bind-Value="request.End" class="form-control" />
                                @request.End.ToShortTimeString()
                            </div>

                            <div class="mb-3">
                                <label>Instrument</label>
                                <InputText @bind-Value="request.Config.Instrument" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Granularity</label>
                                <InputText @bind-Value="request.Config.Granularity" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Stop Loss (pips)</label>
                                <InputNumber @bind-Value="request.Config.StopLossPips" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Take Profit (pips)</label>
                                <InputNumber @bind-Value="request.Config.TakeProfitPips" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Max Lookahead</label>
                                <InputNumber @bind-Value="request.Config.MaxLookahead" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Mode</label>
                                <select @bind="request.Config.Mode">
                                    <option value="1">Bullish Engulfing</option>
                                    <option value="2">Bearish Engulfing</option>
                                    <option value="3">Pin Bar</option>
                                    <option value="4">Mixed</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label>Pip Size</label>
                                <InputNumber @bind-Value="request.Config.PipSize" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Spread Cost</label>
                                <InputNumber @bind-Value="request.Config.SpreadCost" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Commission Per Trade</label>
                                <InputNumber @bind-Value="request.Config.CommissionPerTrade" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label>Slippage (pips)</label>
                                <InputNumber @bind-Value="request.Config.SlippagePips" class="form-control" />
                            </div>

                            <button type="submit" class="btn btn-primary">Run Backtest</button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="HideBacktestModal">Close</button>
                        </EditForm>

                        @if (result != null)
                        {
                            <BacktestResults Start="@request.Start" End="@request.End" Config="@request.Config" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private bool showBacktest = false;
    public BacktestRequest request = new()
    {
        Start = Stat.WindowStart,
        End = Stat.WindowEnd,
        Config = new StrategyConfig()
    };
    private List<Candle> candles;

    protected override async Task OnInitializedAsync()
    {
        result = null;
        //  var result = await BacktestService.LoadCandles(request.Start, request.End, request.Config);
        //candles = result; // or however you're loading them
    }


    private BacktestResult? result = null;

    private async Task RunBacktest()
    {

        try
        {

            var response = await Http.PostAsJsonAsync($"{Stat.Url}/backtest/run", request);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrWhiteSpace(content))
                {
                    result = JsonSerializer.Deserialize<BacktestResult>(content, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                }
                else
                {
                    Console.WriteLine("Response body was empty.");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API error: {response.StatusCode}, Body: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ðŸ’¥ Exception during backtest: {ex.Message}");
        }
    }
    private void ShowBacktestModal() => showBacktest = true;
    private void HideBacktestModal() => showBacktest = false;
}
