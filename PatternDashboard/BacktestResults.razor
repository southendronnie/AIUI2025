@using System.Text.Json
@inject HttpClient Http

@if (result == null)
{
    <p>Running backtestâ€¦</p>
}
else
{
    <div class="summary">
        <p><strong>Total Trades:</strong> @result.TotalTrades</p>
        <p><strong>Wins:</strong> @result.Wins</p>
        <p><strong>Losses:</strong> @result.Losses</p>
        <p><strong>Win Rate:</strong> @($"{result.WinRate:P2}")</p>
        <p><strong>Total Profit:</strong> @($"{result.TotalProfit}")</p>
        <p><strong>Max Drawdown:</strong> @($"{result.MaxDrawdown}")</p>
    </div>

    <h4>Trade History</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Entry Time</th>
                <th>Exit Time</th>
                <th>Entry Price</th>
                <th>Exit Price</th>
                <th>Raw PnL</th>
                <th>Net PnL</th>
                <th>Cost</th>
                <th>Duration</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trade in result.Trades)
            {
                <tr>
                    <td>@trade.EntryTime.ToString("g")</td>
                    <td>@trade.ExitTime.ToString("g")</td>
                    <td>@trade.EntryPrice</td>
                    <td>@trade.ExitPrice</td>
                    <td>@($"{trade.RawPnL}")</td>
                    <td>@($"{trade.NetPnL}")</td>
                    <td>@($"{trade.Cost}")</td>
                    <td>@((trade.ExitTime - trade.EntryTime).ToString())</td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Equity Curve</h4>
}
@code {
    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }

    [Parameter]
    public StrategyConfig Config { get; set; } = new();

    private BacktestResult? result;

    protected override async Task OnInitializedAsync()
    {
        var request = new BacktestRequest
        {
            Start = Start,
            End = End,
            Config = Config
        };

        try
        {
            var response = await Http.PostAsJsonAsync($"{Stat.Url}/backtest/run", request);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrWhiteSpace(content))
                {
                    result = JsonSerializer.Deserialize<BacktestResult>(content, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                }
                else
                {
                    Console.WriteLine("Response body was empty.");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API error: {response.StatusCode}, Body: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ðŸ’¥ Exception during backtest: {ex.Message}");
        }
    }

}